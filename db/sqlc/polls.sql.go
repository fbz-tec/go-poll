// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: polls.sql

package db

import (
	"context"
)

const createPoll = `-- name: CreatePoll :one
insert into polls (
    question,"owner"
) values (
    $1,$2
)
returning poll_id, question, owner, created_at
`

type CreatePollParams struct {
	Question string `json:"question"`
	Owner    string `json:"owner"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll, arg.Question, arg.Owner)
	var i Poll
	err := row.Scan(
		&i.PollID,
		&i.Question,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const getPoll = `-- name: GetPoll :one
select poll_id, question, owner, created_at from polls 
where poll_id = $1 limit 1
`

func (q *Queries) GetPoll(ctx context.Context, pollID int64) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, pollID)
	var i Poll
	err := row.Scan(
		&i.PollID,
		&i.Question,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const listPolls = `-- name: ListPolls :many
select poll_id, question, owner, created_at from polls
limit $1
offset $2
`

type ListPollsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPolls(ctx context.Context, arg ListPollsParams) ([]Poll, error) {
	rows, err := q.db.Query(ctx, listPolls, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Poll{}
	for rows.Next() {
		var i Poll
		if err := rows.Scan(
			&i.PollID,
			&i.Question,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
